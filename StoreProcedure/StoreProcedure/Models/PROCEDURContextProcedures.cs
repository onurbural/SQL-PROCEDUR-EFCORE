// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using StoreProcedure.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace StoreProcedure.Models
{
    public partial class PROCEDURContext
    {
        private IPROCEDURContextProcedures _procedures;

        public virtual IPROCEDURContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PROCEDURContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPROCEDURContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class PROCEDURContextProcedures : IPROCEDURContextProcedures
    {
        private readonly PROCEDURContext _context;

        public PROCEDURContextProcedures(PROCEDURContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetCategoryHierarchyWParams1Result>> GetCategoryHierarchyWParams1Async(int? CategoryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCategoryHierarchyWParams1Result>("EXEC @returnValue = [dbo].[GetCategoryHierarchyWParams1] @CategoryID = @CategoryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IDLISTESIYLEGETIRMEResult>> IDLISTESIYLEGETIRMEAsync(DataTable CategoryIDList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryIDList",
                    Value = CategoryIDList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategoryIDTableTypeS]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IDLISTESIYLEGETIRMEResult>("EXEC @returnValue = [dbo].[IDLISTESIYLEGETIRME] @CategoryIDList = @CategoryIDList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TUMUNULISTELEResult>> TUMUNULISTELEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TUMUNULISTELEResult>("EXEC @returnValue = [dbo].[TUMUNULISTELE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
